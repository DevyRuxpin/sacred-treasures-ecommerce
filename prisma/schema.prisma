// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:/Users/marcharriman/Desktop/Website/religious-ecommerce/prisma/dev.db"
}

// User and Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  reviews  Review[]
  wishlist WishlistItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Product Models
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String
  shortDescription String?
  price           Decimal
  comparePrice    Decimal?
  sku             String        @unique
  barcode         String?
  trackQuantity   Boolean       @default(true)
  quantity        Int           @default(0)
  weight          Decimal?
  dimensions      Json?         // {length, width, height}
  images          Json
  tags            Json
  isActive        Boolean       @default(true)
  isFeatured      Boolean       @default(false)
  isDigital       Boolean       @default(false)
  requiresShipping Boolean      @default(true)
  taxCategory     String?
  seoTitle        String?
  seoDescription  String?
  categoryId      String
  category        Category      @relation(fields: [categoryId], references: [id])
  variants        ProductVariant[]
  orderItems      OrderItem[]
  reviews         Review[]
  wishlistItems   WishlistItem[]
  supplierProducts SupplierProduct[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([categoryId])
  @@index([isActive])
  @@index([isFeatured])
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String
  value     String
  price     Decimal?
  sku       String?  @unique
  quantity  Int      @default(0)
  image     String?
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@unique([productId, name, value])
}

// Order Models
model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  status            OrderStatus @default(PENDING)
  subtotal          Decimal
  taxAmount         Decimal
  shippingAmount    Decimal
  discountAmount    Decimal
  total             Decimal
  currency          String      @default("USD")
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     String?
  paymentIntentId   String?
  shippingAddress   Json        // Address object
  billingAddress    Json        // Address object
  notes             String?
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  userId            String?
  user              User?       @relation(fields: [userId], references: [id])
  items             OrderItem[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id          String        @id @default(cuid())
  quantity    Int
  price       Decimal
  total       Decimal
  orderId     String
  order       Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product       @relation(fields: [productId], references: [id])
  variantId   String?
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt   DateTime      @default(now())

  @@index([orderId])
  @@index([productId])
}

// Review Models
model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
}

// Wishlist Models
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

// Dropshipping Models
model Supplier {
  id          String    @id @default(cuid())
  name        String
  email       String
  phone       String?
  website     String?
  address     Json      // Address object
  contactPerson String?
  notes       String?
  isActive    Boolean   @default(true)
  products    SupplierProduct[]
  orderForwardings OrderForwarding[]
  syncHistory SyncHistory[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SupplierProduct {
  id           String   @id @default(cuid())
  supplierId   String
  supplier     Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplierSku  String?
  supplierPrice Decimal
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([supplierId, productId])
}

// Dropshipping Models
model OrderForwarding {
  id                String   @id @default(cuid())
  orderId           String
  supplierId        String
  supplier          Supplier @relation(fields: [supplierId], references: [id])
  status            String   @default("PENDING") // PENDING, SENT, CONFIRMED, SHIPPED, DELIVERED
  supplierOrderId   String?
  trackingNumber    String?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([orderId, supplierId])
  @@index([supplierId])
  @@index([status])
}

model SyncHistory {
  id                String   @id @default(cuid())
  supplierId        String
  supplier          Supplier @relation(fields: [supplierId], references: [id])
  syncType          String   // INVENTORY, PRODUCTS, ORDERS
  status            String   // SUCCESS, FAILED, PARTIAL
  productsSynced    Int      @default(0)
  errors            Json?
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  createdAt         DateTime @default(now())
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}